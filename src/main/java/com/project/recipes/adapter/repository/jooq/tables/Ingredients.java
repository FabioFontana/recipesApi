/*
 * This file is generated by jOOQ.
 */
package com.project.recipes.adapter.repository.jooq.tables;


import com.project.recipes.adapter.repository.jooq.DefaultSchema;
import com.project.recipes.adapter.repository.jooq.Indexes;
import com.project.recipes.adapter.repository.jooq.tables.records.IngredientsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ingredients extends TableImpl<IngredientsRecord> {

    private static final long serialVersionUID = -1546866;

    /**
     * The reference instance of <code>ingredients</code>
     */
    public static final Ingredients INGREDIENTS = new Ingredients();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IngredientsRecord> getRecordType() {
        return IngredientsRecord.class;
    }

    /**
     * The column <code>ingredients.ID</code>.
     */
    public final TableField<IngredientsRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>ingredients.NAME</code>.
     */
    public final TableField<IngredientsRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>ingredients.QUANTITY</code>.
     */
    public final TableField<IngredientsRecord, Long> QUANTITY = createField("QUANTITY", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>ingredients</code> table reference
     */
    public Ingredients() {
        this(DSL.name("ingredients"), null);
    }

    /**
     * Create an aliased <code>ingredients</code> table reference
     */
    public Ingredients(String alias) {
        this(DSL.name(alias), INGREDIENTS);
    }

    /**
     * Create an aliased <code>ingredients</code> table reference
     */
    public Ingredients(Name alias) {
        this(alias, INGREDIENTS);
    }

    private Ingredients(Name alias, Table<IngredientsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ingredients(Name alias, Table<IngredientsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INGREDIENTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IngredientsRecord, Long> getIdentity() {
        return Internal.createIdentity(com.project.recipes.adapter.repository.jooq.tables.Ingredients.INGREDIENTS, com.project.recipes.adapter.repository.jooq.tables.Ingredients.INGREDIENTS.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IngredientsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(com.project.recipes.adapter.repository.jooq.tables.Ingredients.INGREDIENTS, "KEY_ingredients_PRIMARY", com.project.recipes.adapter.repository.jooq.tables.Ingredients.INGREDIENTS.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IngredientsRecord>> getKeys() {
        return Arrays.<UniqueKey<IngredientsRecord>>asList(
              Internal.createUniqueKey(com.project.recipes.adapter.repository.jooq.tables.Ingredients.INGREDIENTS, "KEY_ingredients_PRIMARY", com.project.recipes.adapter.repository.jooq.tables.Ingredients.INGREDIENTS.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ingredients as(String alias) {
        return new Ingredients(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ingredients as(Name alias) {
        return new Ingredients(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ingredients rename(String name) {
        return new Ingredients(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ingredients rename(Name name) {
        return new Ingredients(name, null);
    }
}
